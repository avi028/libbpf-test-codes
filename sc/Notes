
 /*For byte wise comparison

    struct char1 * c_ptr = NULL;    
    for(int j=0,i=payload_offset; i<skb->len && j<MIN_HTTP_HEADER;i++,j++){
        if(((void*)data + i + sizeof(*c_ptr)) < data_end ){
            c_ptr = (struct char1 *) ((void*)data + i);
            if(DEBUG_LEVEL_2) bpf_printk("%s\n",c_ptr->c);
        }
    }
*/

/* Map Lookup & Update
    
    BPF SIDE : 
        bpf_map_lookup_elem(&<map attr struct name> ,
                            &<key> , 
                            )

        bpf_map_update_elem(&<map attr struct name> ,
                            &<key> , 
                            &<value> , 
                            <type of update 1. BPF_ANY (either create new or update) 
                                            2. BPF_NOEXIST create new only if not exist 
                                            3. BPF_EXIST update only if exists 
                            >
                            )

    USER SIDE : 
        

*/

/*Ring Buffer Handling 
    struct bpf_info * bi = bpf_ringbuf_reserve(&rb, sizeof(*bi), 0);

    if(!bi){
        goto ERROR;
    }    
    
    bi->count=flag;
    bpf_ringbuf_submit(bi, 0);
*/

/* KMP Algorithm : 
    for(int j=0,i=0,total = 0; total < 1000 && j<ud->p_len && i<ud->s_len; total ++){
        if(i<11 && ud->s && j<4 && ud->p && ud->p[j]==ud->s[i]){
            i++;
            j++;
        }
        else{
            if(j>0 && ud->pt && j<4)
                j=ud->pt[j-1];
            else
                i++;
        }       
        flag=j;
    }
*/


/*Handling time in C
 struct tm *tm;
 char ts[32];
 time_t t;
 time(&t);
 tm = localtime(&t);
 strftime(ts, sizeof(ts), "%H:%M:%S", tm);
 printf("%-8s\n", ts);
*/

/*Message queue IPC:

To get the message queue size in bytes :  cat /proc/sys/kernel/msgmnb

To get the message size in bytes :  cat /proc/sys/kernel/msgmax

to change values : sudo  echo <value>  > /proc/sys/kernel/msgmax

to get complete details about the ipcs limits for all: ipcs -l

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#define MAX 10
  
// structure for message queue
struct mesg_buffer {
    long mesg_type; // compulsory field for the message queue
    char mesg_text[100];
} message;
  
// C Program for Message Queue (sender Process)
int main()
{
    key_t key;
    int msgid;
    key = ftok("progfile", 65);
    msgid = msgget(key, 0666 | IPC_CREAT);
    message.mesg_type = 1;
    message.mesg_text = ""; 
    msgsnd(msgid, &message, sizeof(message), 0);
    return 0;
}

// C Program for Message Queue (receiver Process)
int main()
{
    key_t key;
    int msgid;
    key = ftok("progfile", 65);
    msgid = msgget(key, 0666 | IPC_CREAT);
    msgsrcv(msgid, &message, sizeof(message),<message_type as integer>, 0);
    return 0;
}

*/