
 /*For byte wise comparison

    struct char1 * c_ptr = NULL;    
    for(int j=0,i=payload_offset; i<skb->len && j<MIN_HTTP_HEADER;i++,j++){
        if(((void*)data + i + sizeof(*c_ptr)) < data_end ){
            c_ptr = (struct char1 *) ((void*)data + i);
            if(DEBUG_LEVEL_2) bpf_printk("%s\n",c_ptr->c);
        }
    }
*/

/* Map Lookup & Update
 
    bpf_map_lookup_elem(&<map attr struct name> ,
                        &<key> , 
                        )

    bpf_map_update_elem(&<map attr struct name> ,
                        &<key> , 
                        &<value> , 
                        <type of update 1. BPF_ANY (either create new or update) 
                                        2. BPF_NOEXIST create new only if not exist 
                                        3. BPF_EXIST update only if exists 
                        >
                        )
*/

/*Ring Buffer Handling 
    struct bpf_info * bi = bpf_ringbuf_reserve(&rb, sizeof(*bi), 0);

    if(!bi){
        goto ERROR;
    }    
    
    bi->count=flag;
    bpf_ringbuf_submit(bi, 0);
*/

/* KMP Algorithm : 
    for(int j=0,i=0,total = 0; total < 1000 && j<ud->p_len && i<ud->s_len; total ++){
        if(i<11 && ud->s && j<4 && ud->p && ud->p[j]==ud->s[i]){
            i++;
            j++;
        }
        else{
            if(j>0 && ud->pt && j<4)
                j=ud->pt[j-1];
            else
                i++;
        }       
        flag=j;
    }
*/
